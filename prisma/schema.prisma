generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@hardly-guy-thank-ccd.trycloudflare.com:3306/det"
}

model comments {
  comment_id BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  post_id    BigInt?
  user_id    Int?
  content    String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  posts      posts?   @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: Restrict, map: "fk_comment_post")
  users      users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "fk_comment_user")

  @@index([post_id], map: "fk_comment_post")
  @@index([user_id], map: "fk_comment_user")
}

model follows {
  follow_id                         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  follower_id                       Int?
  following_id                      Int?
  created_at                        DateTime @default(now()) @db.Timestamp(0)
  users_follows_follower_idTousers  users?   @relation("follows_follower_idTousers", fields: [follower_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "follows_ibfk_1")
  users_follows_following_idTousers users?   @relation("follows_following_idTousers", fields: [following_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "follows_ibfk_2")

  @@index([follower_id], map: "follower_id")
  @@index([following_id], map: "following_id")
}

model likes {
  like_id    BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    Int?
  post_id    BigInt?
  created_at DateTime @default(now()) @db.Timestamp(0)
  users      users?   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "likes_ibfk_1")
  posts      posts?   @relation(fields: [post_id], references: [post_id], onDelete: Cascade, onUpdate: Restrict, map: "likes_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([user_id], map: "user_id")
}

model posts {
  post_id       BigInt          @id @default(autoincrement())
  user_id       Int?
  content       String          @db.Text
  like_count    Int?            @default(0)
  created_at    DateTime        @default(now()) @db.Timestamp(0)
  comments      comments[]
  image         image[]
  likes         likes[]
  notifications notifications[]
  users         users?          @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "fk_post_user")

  @@index([user_id], map: "fk_post_user")
}

model users {
  user_id                                      Int             @id @default(autoincrement())
  username                                     String          @unique(map: "username") @db.VarChar(50)
  email                                        String          @unique(map: "email") @db.VarChar(100)
  password_hash                                String          @db.VarChar(255)
  full_name                                    String?         @db.VarChar(100)
  bio                                          String?         @db.Text
  created_at                                   DateTime        @default(now()) @db.Timestamp(0)
  link                                         String?         @db.VarChar(255)
  profile_img                                  String?         @db.VarChar(255)
  comments                                     comments[]
  follows_follows_follower_idTousers           follows[]       @relation("follows_follower_idTousers")
  follows_follows_following_idTousers          follows[]       @relation("follows_following_idTousers")
  likes                                        likes[]
  notifications_notifications_sender_idTousers notifications[] @relation("notifications_sender_idTousers")
  notifications_notifications_user_idTousers   notifications[] @relation("notifications_user_idTousers")
  posts                                        posts[]
}

model image {
  id       Int     @id @default(autoincrement())
  post_id  BigInt?
  img_path String? @db.VarChar(255)
  posts    posts?  @relation(fields: [post_id], references: [post_id], onDelete: Restrict, onUpdate: Restrict, map: "FK_post_img")

  @@index([post_id], map: "FK_post_img")
}

model notifications {
  notification_id                      BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                              Int?
  sender_id                            Int?
  post_id                              BigInt?
  type                                 String?   @db.VarChar(50)
  message                              String?   @db.Text
  is_read                              Boolean?  @default(false)
  created_at                           DateTime? @default(now()) @db.Timestamp(0)
  posts                                posts?    @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "fk_notifications_post_id")
  users_notifications_sender_idTousers users?    @relation("notifications_sender_idTousers", fields: [sender_id], references: [user_id], onDelete: Cascade, map: "fk_notifications_sender_id")
  users_notifications_user_idTousers   users?    @relation("notifications_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_notifications_user_id")

  @@index([post_id], map: "idx_post_id")
  @@index([sender_id], map: "idx_sender_id")
  @@index([user_id], map: "idx_user_id")
}
